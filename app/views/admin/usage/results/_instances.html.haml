- if instances && instances.any?
  %div.usage-back
    %h3 Instance Usage
    .table-responsive
      %table.table.table-hover.phone-bill
        %tbody
          - instances.group_by{|i| i[:flavor][:flavor_id]}.each do |_, instances|
            %tr.highlight
              %td.icon
                %i.fa.fa-rocket
              %td== Flavor: #{instances.first[:flavor][:name]}
              %td Unique Identifier
              %td First Booted
              %td Last Recorded State
              %td Terminated
              %td
                %i.fa.fa-clock-o
                Hours Active This Period
              %td
                %i.fa.fa-gbp
                Total
            - instances.sort { |x,y| x[:name] <=> y[:name] }.each do |instance|
              %tr
                %td &nbsp;
                %td.line_entry= instance[:name]
                %td.line_entry= instance[:uuid]
                %td.line_entry= instance[:first_booted_at]
                %td.line_entry= instance[:latest_state]
                %td.line_entry= (instance[:terminated_at] && instance[:terminated_at] <= @to_date) ? instance[:terminated_at] : '-'
                %td.line_entry== #{number_with_delimiter(((instance[:billable_seconds] / 60.0) / 60.0).ceil, :delimiter => ',')} of #{@total_hours}
                -# - if instance[:flavor][:rate].present?
                -#   %td.line_entry== £#{number_with_precision(((((instance[:billable_seconds] / 60.0) / 60.0)).ceil.to_f * instance[:flavor][:rate].to_f).round(2), :delimiter => ',', :separator => '.', :precision => 2)}
                -# - else
                -#   %td.line_entry -
            %tr.highlight.bottomline
              %td &nbsp;
              %td== Total #{instances.first[:flavor][:name]}:
              %td== #{number_with_delimiter(instances.map{|i| ((i[:billable_seconds] / 60.0) / 60.0).ceil}.sum, :delimiter => ',')} hours
              -# %td== £#{number_with_precision((instances.map{|i| ((i[:billable_seconds] / 60.0) / 60.0).ceil}.sum.to_f * instances.first[:flavor][:rate].to_f).round(2), :delimiter => ',', :separator => '.', :precision => 2)}
              %td &nbsp;
              %td &nbsp;
              %td &nbsp;
              %td &nbsp;
            %tr
              %td &nbsp;
              %td &nbsp;
              %td &nbsp;
              %td &nbsp;
              %td &nbsp;
              %td &nbsp;
              %td &nbsp;
              %td &nbsp;
